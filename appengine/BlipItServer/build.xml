<project name="BlipItServer" default="war">

    <property file="local.properties"/>

    <property name="appengine.sdk" location="${appengine.sdk.dir}"/>

    <fail message="Please define the appengine.sdk property to point to your SDK directory">
        <condition>
            <not>
                <and>
                    <isset property="appengine.sdk"/>
                    <available file="${appengine.sdk}/config/user/ant-macros.xml"/>
                </and>
            </not>
        </condition>
    </fail>

    <import file="${appengine.sdk}/config/user/ant-macros.xml"/>

    <!-- Remote debug port for dev_appserver -->
    <property name="debug.port" value="5005"/>

    <!-- HTTP port for dev_appserver -->
    <property name="http.port" value="8080"/>

    <!-- Name of log file to write logs to -->
    <property name="log.file" value="app.log"/>

    <!-- Number of days worth of logs to retrieve -->
    <property name="log.days" value="2"/>

    <!-- Change if you like e.g. "war" better than "www" for the output -->
    <property name="war.dir" location="war"/>

    <target name="war" depends="enhance" description="Assemble the application directory">
        <mkdir dir="${war.dir}/WEB-INF"/>
        <copy todir="${war.dir}/WEB-INF">
            <fileset dir="src/META-INF">
                <include name="*.xml"/>
                <include name="*.properties"/>
            </fileset>
        </copy>
        <enhance_war war="${war.dir}"/>
    </target>

    <target name="copyjsps" description="Copies all JSPs to the application war directory">
        <copy todir="${war.dir}">
            <fileset dir="src/jsp">
                <include name="*.jsp"/>
            </fileset>
        </copy>
    </target>

    <target name="enhance" depends="compile, copyjsps" description="Enhance the classes after compilation">
        <enhance_war war="${war.dir}"/>
    </target>

    <path id="project.classpath">
        <pathelement path="${war.dir}/WEB-INF/classes"/>
        <pathelement path="${war.dir}/WEB-INF/test-classes"/>
        <fileset dir="${war.dir}/WEB-INF/lib">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${appengine.sdk}/lib">
            <include name="shared/**/*.jar"/>
        </fileset>
        <fileset dir="../../shared/lib/appengine">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test.classpath">
        <pathelement path="${war.dir}/WEB-INF/classes"/>
        <pathelement path="${war.dir}/WEB-INF/test-classes"/>
        <fileset dir="${war.dir}/WEB-INF/lib">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${appengine.sdk}/lib">
            <include name="shared/**/*.jar"/>
        </fileset>
        <fileset dir="${appengine.sdk}/lib">
            <include name="impl/*.jar"/>
        </fileset>
        <fileset dir="${appengine.sdk}/lib">
            <include name="testing/*.jar"/>
        </fileset>
        <fileset dir="../../shared/lib/appengine">
            <include name="*.jar"/>
        </fileset>
    </path>

    <target name="buildshared" description="Builds the shared libraries">
        <ant antfile="../BlipItShared/build.xml" target="jar" dir="../BlipItShared"/>
    </target>

    <target name="copyjars" depends="buildshared" description="Copies the App Engine JARs to the WAR.">
        <copy todir="${war.dir}/WEB-INF/lib" flatten="true">
            <fileset dir="${appengine.sdk}/lib/user">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="../BlipItShared/dist">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="../../shared/lib/appengine">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="compile" depends="clean, copyjars" description="Compile the application servlet code">
        <mkdir dir="${war.dir}/WEB-INF/classes"/>
        <copy todir="${war.dir}/WEB-INF/classes">
            <fileset dir="src">
                <exclude name="**/*.java"/>
                <exclude name="**/*.jsp"/>
            </fileset>
        </copy>
        <javac srcdir="src" destdir="${war.dir}/WEB-INF/classes" classpathref="project.classpath" debug="on"/>
    </target>

    <target name="test-compile" depends="compile" description="Compile the application unit test code">
        <mkdir dir="${war.dir}/WEB-INF/test-classes"/>
        <copy todir="${war.dir}/WEB-INF/test-classes">
            <fileset dir="test">
                <exclude name="**/*.java"/>
                <exclude name="**/*.jsp"/>
            </fileset>
        </copy>
        <javac srcdir="test" destdir="${war.dir}/WEB-INF/test-classes" classpathref="test.classpath" debug="on"/>
    </target>

    <target name="run-tests" depends="test-compile">
        <property name="test.reports.dir" value="${war.dir}/WEB-INF/test-classes/reports"/>
        <mkdir dir="${test.reports.dir}"/>
        <junit printsummary="yes" failureProperty="testsFailed">
            <classpath refid="test.classpath"/>
            <formatter type="plain"/>
            <batchtest todir="${test.reports.dir}">
                <fileset dir="test">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <echo message="Results written to : ${test.reports.dir}"/>
        <fail message="One or more tests failed. See the reports for more details." if="testsFailed"/>
    </target>

    <target name="clean" description="Force a clean slate to rebuild">
        <delete dir="${war.dir}" quiet="true"/>
        <delete dir="build" quiet="true"/>
        <delete dir="dist" quiet="true"/>
    </target>

    <target name="runserver" depends="war" description="Run the dev_appserver">
        <dev_appserver war="${war.dir}" port="${http.port}"/>
    </target>

    <target name="runserver-tests" depends="war" description="Run the dev_appserver in the background">
        <echo message="Launching appengine dev server in background..."/>
        <condition property="online">
            <socket server="localhost" port="${http.port}"/>
        </condition>
        <antcall target="runserver-tests-safe"/>
    </target>

    <target name="runserver-tests-safe" unless="online">
        <exec executable="${appengine.sdk}/bin/dev_appserver.sh" spawn="true">
            <arg value="--port=${http.port}"/>
            <arg value="--address=localhost"/>
            <arg value="${war.dir}"/>
        </exec>
        <waitfor maxwait="10" maxwaitunit="second">
            <and>
                <socket server="localhost" port="${http.port}"/>
            </and>
        </waitfor>
    </target>

    <target name="dev_appserver" depends="runserver"/>

    <target name="debug" depends="war" description="Launches dev_appserver with remote debugging enabled">
        <echo message="Launching dev_appserver on Web port ${http.port}, Java remote debug port ${debug.port}"/>
        <dev_appserver war="${war.dir}" port="${http.port}">
            <options>
                <arg value="--jvm_flag=-Xdebug"/>
                <arg value="--jvm_flag=-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=${debug.port}"/>
            </options>
        </dev_appserver>
    </target>

    <target name="update" depends="war" description="Uploads the application, including indexes">
        <appcfg action="update" war="${war.dir}"/>
    </target>

    <target name="update_indexes" depends="war" description="Uploads only the application's indexes">
        <appcfg action="update_indexes" war="${war.dir}"/>
    </target>

    <target name="rollback" depends="war" description="Rolls back any in-progress application update">
        <appcfg action="rollback" war="${war.dir}"/>
    </target>

    <target name="request_logs" description="Downloads the application's logs">
        <appcfg action="request_logs" war="${war.dir}">
            <options>
                <arg value="--num_days=${log.days}"/>
            </options>
            <args>
                <arg value="${log.file}"/>
            </args>
        </appcfg>
    </target>

</project>
